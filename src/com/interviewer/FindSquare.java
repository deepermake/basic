package com.interviewer;

public class FindSquare {

    public static void main(String[] args) {
        // findSquare(new int[][]{{1, 0, 1, 1}, {0, 0, 0, 1}, {1, 0, 0, 0}, {1, 0, 0, 0}});
        // [[1, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0, 1, 0, 0, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 1, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1, 1]]
        System.out.println(findSquare(new int[][]{
                {1, 1, 1, 1, 0, 1, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 0, 1, 0, 1, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 0, 1, 0, 1, 1, 1, 1, 1, 1},
                {1, 1, 0, 0, 1, 0, 1, 0, 0, 1},
                {0, 0, 0, 1, 1, 1, 0, 1, 0, 1},
                {0, 0, 0, 1, 0, 1, 0, 1, 0, 1},
                {1, 0, 1, 0, 1, 1, 0, 1, 1, 1},
                {1, 1, 1, 0, 1, 0, 0, 1, 1, 1}
        }).toString());
        // findSquare(new int[][]{{0, 1, 1}, {1, 0, 1}, {1, 1, 0}});
    }

    /**
     * 1 0 1
     * 0 0 1
     * 0 0 1
     * 解题思路
     * dp[i][j] 表示坐标i,j的黑方正的长度
     * 1、matrix[i][j]=1 则dp[i][j]=0
     * 2、matrix[i][j]=0
     * 2.1、不需要考虑中间的坐标是否为0，只需要关注方阵边坐标为0即可
     * 2.1、如果 matrix[i-1][j-1] == 1 || matrix[i-1][j] == 1 || matrix[i][j-1] == 1 则dp[i][j]=0
     * 2.2  如果 dp[i][j] = n 表示dp[i][j]方阵边的长度为n 坐标{i,j}表示方阵的右下角
     * dp[i][j] = {matrix[i-n+1][j-n+1] ... matrix[i-n+1][j] = 1 && matrix[i][j-n+1]}
     *
     * 目前遇到的问题是，只能知道单个坐标位置的大小，但是坐标间的关联关系目前不确定
     *
     * @param matrix
     * @return
     */

    public static int[] findSquare(int[][] matrix) {
        int l = matrix.length;
        int[][] dp = new int[l][l];

        int[] resultArr = new int[3];
        return resultArr;
    }
}
